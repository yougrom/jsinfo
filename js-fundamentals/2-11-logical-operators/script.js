// Логические операторы
// В JavaScript есть семь логических операторов:
// || (ИЛИ) - возвращает true, если хотя бы один из операндов true.
  // ||= (Оператор логического присваивания ИЛИ) - присваивает правый операнд левому, если левый операнд ложный.
// && (И) - возвращает true, если оба операнда true.
  // &&= (Оператор логического присваивания И) - присваивает правый операнд левому, если левый операнд истинный.
// ! (НЕ) - возвращает true, если операнд false, иначе false.
// ?? (Оператор нулевого слияния) - возвращает первый определённый (не null и не undefined) операнд, если оба операнда undefined или null, то возвращает правый операнд.
  // ??= (Оператор присваивания нулевого слияния) - присваивает правый операнд левому, если левый операнд null или undefined.

// Оператор ИЛИ „||“
// в программировании ИЛИ предназначено только для манипулирования булевыми значениями: 
// в случае, если какой-либо из аргументов true, он вернёт true, в противоположной ситуации возвращается false.
// Например:
console.log(true || true); // true
console.log(false || true); // true
console.log(true || false); // true
console.log(false || false); // false
// Если операндов больше двух, оператор || возвращает первое истинное значение.

// Обычно оператор || используется в if для проверки истинности любого из заданных условий.
// Например:
let hour = 9;
if (hour < 10 || hour > 18) {
    console.log('The office is closed.');
}

// ИЛИ "||" находит первое истинное значение
// Оператор || выполняет следующие действия:
// 1. Вычисляет операнды слева направо.
// 2. Для каждого операнда выполняется следующее:
//    - Операнд преобразуется в логическое значение.
//    - Если результат true, останавливается и возвращается исходное значение операнда.
// 3. Если все операнды являются ложными, возвращается последний операнд.
// Например:
console.log(1 || 0); // 1
console.log(true || 'no matter what'); // true
console.log(null || 1); // 1
console.log(null || 0 || 1); // 1
console.log(undefined || null || 0); // 0

// При выполнении ИЛИ || с несколькими значениями:
result = value1 || value2 || value3;

// Exapmle 1
let firstName = "";
let lastName = "";
let nickName = "SuperCoder";
console.log(firstName || lastName || nickName || "Anonymous"); // SuperCoder

// Сокращённое вычисление.
// ИЛИ || находит первое истинное значение
// Если первый операнд истинный, оператор || не выполняет проверку второго.
// Это называется «короткое сравнение» или «сокращённое вычисление».
// Например:
let x;
true || (x = 1);
console.log(x); // undefined - x не присвоено значение, т.к. первый операнд true

// ||= (Логическое присваивание ИЛИ)
// Оператор ||= присваивает правый операнд левому, если левый операнд ложный.
// синтаксис
a ||= b;

// Например:
let a = '';
a ||= 2;
console.log(a); // 2

// Теперь давайте перепишем a ||= b под вид «сокращённого вычисления»:
a || (a = b);

// Exapmle 2
let johnHasCar = false;
johnHasCar ||= "John has no car.";
console.log(johnHasCar); // John has no car.

// Exapmle 3
let manufacturer = "";
manufacturer ||= "Unknown";
console.log(manufacturer); // Unknown


// Оператор И „&&“
// Оператор && возвращает true, если оба операнда истинны; в противном случае возвращает false.
// Например:
console.log(true && true); // true
console.log(false && true); // false
console.log(true && false); // false
console.log(false && false); // false
// Если операндов больше двух, оператор && возвращает первое ложное значение.
// И «&&» находит первое ложное значение
// Оператор && выполняет следующие действия:
// 1. Вычисляет операнды слева направо.
// 2. Для каждого операнда выполняется следующее:
//    - Операнд преобразуется в логическое значение.
//    - Если результат false, останавливается и возвращается исходное значение операнда.
// 3. Если все операнды являются истинными, возвращается последний операнд.

// Вышеуказанные правила схожи с поведением ИЛИ. Разница в том, что И возвращает первое ложное значение, а ИЛИ –  первое истинное.
// Например:
// Если первый операнд истинный,
// И возвращает второй:
console.log(1 && 0); // 0
console.log(1 && 5); // 5

// Если первый операнд ложный,
// И возвращает его. Второй операнд игнорируется
console.log(null && 5); // null
console.log(0 && "no matter what"); // 0

// Можно передать несколько значений подряд. В таком случае возвратится первое «ложное» значение, на котором остановились вычисления.
// Например:
console.log( 1 && 2 && null && 3 ); // null

// Когда все значения верны, возвращается последнее значение:
console.log( 1 && 2 && 3 ); // 3

// Приоритет оператора && больше, чем у ||, так что он выполняется раньше.
// Таким образом, код a && b || c && d по существу такой же, как если бы выражения && были в круглых скобках: (a && b) || (c && d).
// Например:
let a1 = 1;
let b1 = 2;
let c1 = 3;
let d1 = 4;
console.log( a1 && b1 || c1 && d1 ); // 2 - (a && b) || (c && d) = (1 && 2) || (3 && 4) = 2 || 4 = 2 - первое ложное значение


// &&= (Логическое присваивание И)
// синтаксис
a &&= b;
// Оператор &&= присваивает правый операнд левому, если левый операнд истинный.
// Например:
let a2 = '';
a2 &&= 2;
console.log(a2); // '' - a2 не присвоено значение, т.к. первый операнд false

// Exapmle 1
let greeting = "Hello";
greeting &&= greeting + " fellow!"  ;
console.log(greeting); // Hello fellow!


// Оператор НЕ „!“
// Оператор ! преобразует значение в логическое и возвращает противоположное значение.
// Синтаксис довольно прост:
result = !value;

// Он применяется к одному значению и выполняет следующие действия:
// 1. Операнд преобразуется в логическое значение.
// 2. Возвращает противоположное значение.

// Например:
console.log(!true); // false
console.log(!0); // true


// Task 1
// Что выведет console.log (ИЛИ)?
console.log( null || 2 || undefined ); // 2 - это первое значение, которое в логическом контексте даст true.

// Task 2
console.log(alert(1) || 2 || alert(3)); // сначала 1, затем 2.

// Task 3
console.log( 1 && null && 2 ); // null

// Task 4
console.log(alert(1) && alert(2) ); // 1, а затем undefined.

// Task 5
alert( null || 2 && 3 || 4 ); // 3

// Task 6
let value = NaN;

value &&= 10; // NaN = false
value ||= 20; // NaN
value &&= 30; // NaN
value ||= 40; // 40

alert(value); // 30.

// Task 7
// Напишите условие if для проверки, что переменная age находится в диапазоне между 14 и 90 включительно.
// «Включительно» означает, что значение переменной age может быть равно 14 или 90.
if (age >= 14 && age <= 90);

// Task 8
// Напишите условие if для проверки, что значение переменной age НЕ находится в диапазоне 14 и 90 включительно.
// Напишите два варианта: первый с использованием оператора НЕ !, второй – без этого оператора.
if (!(age >= 14 && age <= 90));
if (age < 14 && age > 90);

// Task 9
// Какие из перечисленных ниже alert выполнятся?
// Какие конкретно значения будут результатами выражений в условиях if(...)?
if (-1 || 0) alert( 'first' ); // Результат -1 || 0 = -1, в логическом контексте true
if (-1 && 0) alert( 'second' ); // -1 && 0 = 0,  в логическом контексте false

if (null || -1 && 1) alert( 'third' ); // оператор && имеет больший приоритет, чем ||
// так что -1 && 1 выполнится раньше
// вычисления: null || -1 && 1  ->  null || 1  ->  1

// Task 9
let userName = prompt('Кто там?', '');
if (userName === 'admin') {
  let pass = prompt('Password?', '');

  if (pass === 'I am Boss') {
    alert('Hello');
  } else if (pass === '' || pass === null) {
      alert('Cancel');
    } else {
      alert('Incorrect password');
  }
} else if (userName === '' || userName === null) {
  alert('Cancel');
} else {
  alert('I dont know you')
}
