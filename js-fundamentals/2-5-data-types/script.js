// Типы данных
// Существует восемь типов данных в JavaScript. Семь из них являются примитивными, а объекты — восьмой.

// Примитивные типы: потому что их значениями могут быть только простые значения (будь то строка, или число, или что-то ещё). 
// Вот они:
// number — для чисел любого вида: целочисленных или чисел с плавающей точкой, целые и дробные.
// bigint — для целых чисел произвольной длины.
// string — для строк.
// boolean — для true/false.
// null — для неизвестных значений — отдельный тип, имеющий одно значение null.
// undefined — для неприсвоенных значений — отдельный тип, имеющий одно значение undefined.
// symbol — для уникальных идентификаторов.
// Объекты — для более сложных структур данных.
// object — для более сложных структур данных.

// Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число:
let message = 'Hello!';
message = 123456;
// Переменная message может хранить строку и число, потому что в JavaScript существует динамическая типизация.

// В JavaScript есть 7 основных типов данных:
// number для любых чисел: целочисленных или чисел с плавающей точкой, целые и дробные.
let n = 123;
n = 12.345;

// Infinity, -Infinity и NaN
// Специальные числовые значения Infinity (бесконечность) и NaN (ошибка вычислений).
// Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
alert( 1 / 0 ); // Infinity

// NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции, например:
// Значение NaN «прилипчиво». Любая математическая операция с NaN возвращает NaN:
alert( "не число" / 2 ); // NaN, такое деление является ошибкой

// bigint для целых чисел произвольной длины.
const bigInt = 1234567890123456789012345678901234567890n;

// string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
let str = "Hello";
let str2 = 'Single quotes are ok too';
let phrase = `can embed ${str}`;

// boolean для true/false. Этот тип используется для хранения логических значений: true (истина) и false (ложь).
let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено

// null для неизвестных значений – отдельный тип, имеющий одно значение null.
// Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».
let age = null;

// undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
let x;
alert(x); // выведет "undefined" (значение не присвоено) 

// Обычно null используется для присвоения переменной «пустого» или «неизвестного» значения, а undefined – для проверок, была ли переменная назначена.
// Также undefined – это значение переменной, которая была объявлена, но не получила значения.

// symbol для уникальных идентификаторов. 
// Символы создаются вызовом функции Symbol(), которая возвращает уникальное значение.
let id = Symbol("id");
let id2 = Symbol("id");
alert(id == id2); // false

// Оператор typeof возвращает тип аргумента. У него есть два синтаксиса: со скобками и без:
// Обычный синтаксис
typeof 5 // Выведет "number"
// Синтаксис, напоминающий вызов функции (встречается реже)
typeof(5) // Также выведет "number"

// Вызов typeof x возвращает строку с именем типа:
typeof undefined // "undefined"
typeof 0 // "number"
typeof 10n // "bigint"
typeof true // "boolean"
typeof "foo" // "string"
typeof Symbol("id") // "symbol"
typeof Math // "object"  (1) — встроенный объект Math, который предоставляет математические операции и константы.
typeof null // "object"  (2) — ошибка в языке
typeof alert // "function" (3) —  потому что alert является функцией. 
