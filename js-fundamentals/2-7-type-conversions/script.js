// Преобразование типов
// Не Явное преобразование типов
// Преобразование типов в JavaScript происходит автоматически во время выполнения операций.
// Неявное преобразование типов (type coercion) в JavaScript происходит автоматически, когда операторы и выражения требуют значений определенного типа. 
// Например:
// При сложении числа и строки число автоматически преобразуется в строку: 2 + "3" даст строку "23".
// Булевы значения true и false преобразуются в числа 1 и 0 соответственно, если они участвуют в математических операциях.

// как преобразование типов происходит при сравнении значений с помощью оператора == и оператора === в JavaScript?
/**
 * Оператор == в JavaScript выполняет неявное преобразование типов, если сравниваемые значения имеют разные типы данных. 
 * Это значит, что он попытается преобразовать значения к одному типу перед сравнением.
 * Например, выражение "5" == 5 вернет true, так как строка "5" будет преобразована в число 5.
 */

// Оператор === в JavaScript не выполняет преобразование типов.
/**
 * Оператор === называется оператором строгого равенства и не выполняет преобразование типов. 
 * Он проверяет и значение, и тип данных. Поэтому выражение "5" === 5 вернет false, потому что строка "5" и число 5 имеют разные типы данных.
 */

/**
 * Оператор '+' также используется для конкатенации строк, что может привести к неожиданным результатам, если один из операндов является строкой. 
 * Например, 2 + "2" даст строку "22", а не число 4
 * 
 * Оператор '-' используется для вычитания чисел, но если один из операндов является строкой, то он будет преобразован в число. 
 * Например, "6" - "2" даст число 4
 */

// Явное преобразование типов
// Строковое преобразование (String Conversion)
// String(value) — чтобы преобразовать значение к строке:
// Example
let value = true;
console.log(typeof value); // boolean
value = String(value); // теперь value это строка "true"
console.log(typeof value); // string

// Численное преобразование (Number Conversion)
// Number(value) — чтобы преобразовать значение к числу:
// Example
console.log("6" / "2"); // 3 - строки преобразуются в числа

// Example
let str = "123";
console.log(typeof str); // string
let num = Number(str); // становится числом 123
console.log(typeof num); // number

// Example
let age = Number("Любая строка вместо числа");
console.log(age); // NaN, преобразование не удалось

// Example undefined
let und = Number(undefined);
console.log(und); // NaN

// Example true
let bul = Number(true);
console.log(bul); // 1

// Example false
let bul2 = Number(false);
console.log(bul2); // 0

// Exumple null
let nul = Number(null);
console.log(nul); // 0

// Example
console.log(Number("   123   ")); // 123
console.log(Number("123z")); // NaN (ошибка на символе z)

// Логическое преобразование (Boolean Conversion)
// Значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false.
// Все остальные значения становятся true.
// Boolean(value) — преобразует значение к логическому типу:
// Example
console.log(Boolean(1)); // true
console.log(Boolean("0")); // true
console.log(Boolean(" ")); // true
console.log(Boolean("hello")); // true

// Example false
console.log(Boolean(0)); // false
console.log(Boolean("")); // false
console.log(Boolean(null)); // false
console.log(Boolean(undefined)); // false
console.log(Boolean(NaN)); // false

// Summary
// Существуют три встроенных функции для преобразования типов:
// String(value) преобразует значение к строке.
// Number(value) преобразует значение к числу.
// Boolean(value) преобразует значение к логическому типу.

// Преобразование к строке происходит, когда нам нужно что-то вывести. 
// Мы также можем использовать функцию String(value) для явного преобразования в строку.