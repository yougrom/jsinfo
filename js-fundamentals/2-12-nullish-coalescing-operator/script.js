// Операторы нулевого слияния и присваивания: '??', '??=' (nullish coalescing operator)
// Так как он обрабатывает null и undefined одинаковым образом, то для этой статьи мы введём специальный термин. 
// Для краткости будем говорить, что значение «определено», если оно не равняется ни null, ни undefined.

// Оператор нулевого слияния «??» предоставляет хороший способ выбрать первое «определённое» значение из списка переменных.
// Например:
// Результат выражения a ?? b будет следующим:
// если a определено, то a,
// если a не определено, то b.
// Иначе говоря, оператор ?? возвращает первый аргумент, если он не null/undefined, иначе второй.

// Вот как можно переписать выражение result = a ?? b, используя уже знакомые нам операторы:
result = a ?? b;
// равнозначно этому:
result = (a !== null && a !== undefined) ? a : b;

// Как правило, оператор ?? нужен для того, чтобы задать значение по умолчанию для потенциально неопределённой переменной.
// Например, здесь мы присваиваем переменной height значение по умолчанию 100:
let height1 = a ?? 100; 
alert(height1); // 100, потому что a не определено

// Example
let firstName = null;
let lastName = null;
let nickName = "Supercode";
// показывает первое определённое значение:
console.log(firstName ?? lastName ?? nickName ?? "Anonymous"); // Supercode

// Сравнение с оператором ||
// Оператор нулевого слияния ?? во многом похож на оператор ||, но есть разница.
let firstName1 = null;
let lastName1 = null;
let nickName1 = "Supercode";
console.log( firstName1 || lastName1 || nickName1 || "Anonymous" ); // Supercode

// Оператор нулевого слияния ?? не работает с ||, потому что || имеет более низкий приоритет.
// В примере ниже || приведёт к ошибке, так как null не преобразуется в false:
let height2 = 0;
console.log(height2 || 100); // 100 - выведет 100, так как 0 преобразуется в false
console.log(height2 ?? 100); // 0 - выведет 0, так как 0 не равен null или undefined

// Приоритет 
// Приоритет оператора ?? такой же, как и у ||. Он ниже, чем у большинства других операторов, таких как =, ?.

// Так что, в выражениях такого вида понадобятся скобки:
let height = null;
let width = null;

// важно: используйте круглые скобки
let area = (height ?? 100) * (width ?? 50);

alert(area); // 5000

// Использование ?? вместе с && или ||
// По соображениям безопасности JavaScript запрещает использование оператора ?? вместе с && и ||, если приоритет явно не указан при помощи круглых скобок.
let x = 1 && 2 ?? 3; // Синтаксическая ошибка
// В этом случае нужно добавить скобки:
let x1 = (1 && 2) ?? 3; // работает

// Оператор нулевого присваивания (??=)
// Оператор ??= – это комбинация операторов ?? и =. Он служит для присваивания переменной значения только в том случае, если она не определена.
let userAge = null;
if (userAge === null || userAge === undefined) { // если userAge не определено
  userAge = 18;
} // 18
console.log(userAge);
// С использованием оператора ??= это можно записать короче:
x ??= y
// Оператор ??= присвоит x значение y только в том случае, если x не определено (null/undefined).

let a = () => {
  let userAge = null;
  userAge ??= 18;
  console.log(userAge); // 18
};

// Итого
// Оператор нулевого слияния ?? предоставляет хороший способ выбрать первое «определённое» значение из списка переменных.
// Оператор ?? имеет очень низкий приоритет, лишь немного выше, чем у ? и =, поэтому при использовании его в выражении, скорее всего, потребуются скобки.
// Запрещено использовать вместе с || или && без явно указанного приоритета, то есть без скобок.
// Для присвоения переменной значения в зависимости от того, «определена» она или нет, используется оператор нулевого присваивания ??=.

// Tasks 1
console.log(undefined ?? NaN ?? null ?? "" ?? " "); // NaN

// Tasks 2
let city = null;

city ??= "Берлин";
city ??= null;
city ??= "Кёльн";
city ??= "Гамбург";

console.log(city);  // Берлин

// Tasks 2
// Перепишите код используя операторы ??, ??=
let num1 = 10,
    num2 = 20,
    result;

if (result === null ?? result === undefined) {
  if (num1 !== null ?? num1 !== undefined) {
    result = num1;
  } else {
    result = num2;
  }
}
console.log(result);

// Solution
let num3 = 10,
    num4 = 20,
    result1;
result ??= num3 ?? num4;
console.log(result1);

// Пример 1: Если переменная name не определена или имеет значение null, используется значение по умолчанию "Гость"
let name;
let defaultName = "Гость";
console.log(name ?? defaultName); // Выведет: "Гость"

// Пример 2: Если переменная age не определена или имеет значение null, используется значение по умолчанию 18
let age = null;
let defaultAge = 18;
console.log(age ?? defaultAge); // Выведет: 18

// Пример 3: Если переменная count не определена или имеет значение null, используется значение 0
let count;
console.log(count ?? 0); // Выведет: 0

// Пример 4: Если переменная message не определена или имеет значение null, используется пустая строка
let message;
console.log(message ?? ""); // Выведет: ""
________________________________________________________

// Пример 1: Если переменная name не определена или имеет значение null, присвоить ей значение "Гость"
let name = null;
name ??= "Гость";
console.log(name); // Выведет: "Гость"

// Пример 2: Если переменная count не определена или имеет значение null, присвоить ей значение 0
let count;
count ??= 0;
console.log(count); // Выведет: 0

// Пример 3: Если переменная message не определена или имеет значение null, присвоить ей значение "Сообщение не задано"
let message;
message ??= "Сообщение не задано";
console.log(message); // Выведет: "Сообщение не задано"