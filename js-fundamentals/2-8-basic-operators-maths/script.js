// Базовые операторы, математика
// Термины: «унарный», «бинарный», «операнд» и «оператор»

// Операнд – то, к чему применяется оператор. 
// Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2.

// Унарным называется оператор, который применяется к одному операнду. 
// Например, оператор унарный минус "-" меняет знак числа на противоположный: -3.

// Бинарным называется оператор, который применяется к двум операндам.
// Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2.

// Математические операторы
// Операторы: +, -, *, /, %

// Взятие остатка от деления: %
// Результат a % b – это остаток от целочисленного деления a на b.
// Например:
console.log(5 % 2); // 1, остаток от деления 5 на 2
console.log(8 % 3); // 2, остаток от деления 8 на 3
console.log(6 % 3); // 0, остаток от деления 6 на 3

// Возведение в степень: **
// Оператор возведения в степень a ** b возводит a в степень b.
// Например:
console.log(2 ** 2); // 4  (2 умножено на себя)
console.log(2 ** 3); // 8
console.log(2 ** 4); // 16

// Сложение строк при помощи бинарного +
// При сложении строк при помощи бинарного плюса + строки объединяются:
let s = "my" + "string"; // объединяем две строки в одну 
console.log(s); // mystring
// Обратите внимание, если хотя бы один операнд является строкой, то второй будет также преобразован в строку.
console.log(1 + '2'); // '12'
console.log('1' + 2); // '12'

// Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.
// Например, деление /:
console.log(6 / '3'); // 2

// Приведение к числу, унарный +
// Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами. Но если операнд не число, унарный плюс преобразует его в число.
// Например:
let x = '10';
console.log(typeof +x); // number
console.log(typeof x); // string
// На самом деле это то же самое, что и Number(...), только короче.
// Например, обычно значения полей HTML-формы — это строки.
// Чтобы их преобразовать в числа, можно использовать унарный плюс или Number(...).
let apples = '10';
let oranges = '20';
console.log(+apples + +oranges); // 30, число, оба операнда предварительно преобразованы в числа
console.log(apples + oranges); // 1020, строка, операнды не преобразованы

// Приоритет операторов
// умножение в выражении выполнится раньше сложения 1 + 2 * 2 = 5
// Скобки важнее, чем приоритет оператора. (1 + 2) * 2 даст 6.
// Полный список приоритета операторов можно найти в документации MDN. — https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_precedence

// Присваивание = возвращает значение — один из самых низких приоритетов: 2. Присваивание выполняется справа налево.
// Присваивание = возвращает значение
// Оператор присваивания = не просто присваивает значение, но и возвращает его.

// Присваивание по цепочке
let a, b, c;
a = b = c = 2 + 2;
console.log(a); // 4
console.log(b); // 4
console.log(c); // 4

// Сокращённая арифметика с присваиванием +=, -=, *=, /=
// Часто нужно применить оператор к переменной и сохранить результат в ней же.
// Например:
let n = 2;
n += 5; // теперь n = 7 (работает как n = n + 5)
n *= 2; // теперь n = 14 (работает как n = n * 2)

// Инкремент/декремент
// Операторы инкремента/декремента: ++, --
// Инкремент ++ увеличивает переменную на 1:
let counter = 2;
counter++; // работает как counter = counter + 1, просто короче
console.log(counter); // 3
// Инкремент/декремент можно применить только к переменной. Попытка использовать его на значении, типа 5++, приведёт к ошибке.

// Операторы ++ и -- могут быть расположены не только после, но и до переменной.
// Когда оператор расположен после переменной, это называется «постфиксная форма»: counter++.
// Когда оператор расположен перед переменной, это называется «префиксная форма»: ++counter.

// все операторы возвращают значение 
// Префиксная форма возвращает новое значение после увеличения/уменьшения.
// постфиксная форма возвращает старое (до увеличения/уменьшения числа).
// Например:
let counter2 = 1;
let a2 = ++counter2; // (*) В строке (*) префиксная форма ++counter увеличивает counter и возвращает новое значение 2.
console.log(a2); // 2

// Теперь посмотрим на постфиксную форму:
let counter3 = 1;
let a3 = counter3++; // (*) В строке (*) постфиксная форма counter++ также увеличивает counter, но возвращает старое значение (которое было до увеличения). 
console.log(a3); // 1

// Подведём итоги:
// Если результат оператора не используется, а нужно только увеличить/уменьшить переменную, тогда без разницы, какую форму использовать:
let counter4 = 0;
counter4++;
++counter4;
console.log(counter4); // 2

// Если результат оператора тут же использовать, используйте префиксную форму:
let counter5 = 0;
console.log(++counter5); // 1

// Если нужно увеличить и при этом получить значение переменной до увеличения – нужна постфиксная форма:
let counter6 = 0;
console.log(counter6++); // 0

// Инкремент/декремент можно использовать в любых выражениях
let counter7 = 1;
console.log(2 * ++counter7); // 4
// Более сложные примеры
let counter8 = 1;
console.log(2 * counter8++); // 2, потому что counter++ возвращает старое значение

// Побитовые операторы
// Поддерживаются следующие побитовые операторы:
// И (&) — AND
// ИЛИ (|) — OR
// Исключающее ИЛИ (^) — XOR
// НЕ (~) — NOT
// Левый сдвиг (<<) — LEFT SHIFT
// Правый сдвиг (>>) — RIGHT SHIFT
// Правый сдвиг с заполнением нулями (>>>) — ZERO-FILL RIGHT SHIFT

// Оператор «запятая» `,`
// Позволяет вычислить несколько выражений, разделённых запятой ,. Каждое из них выполняется и возвращается само по себе, а результатом всего выражения становится результат последнего выражения.
let a1 = (1 + 2, 3 + 4);
console.log(a1); // 7 (результат 3 + 4)
// оператор , должен «выполнять каждое выражение, но возвращать результат только последнего».
// Зачем нам оператор, который отбрасывает всё, кроме последнего выражения?
// Он используется в сложных инструкциях, когда нужно выполнить несколько действий, но вернуть только одно значение.
// Например, в цикле:
for (a = 1, b = 3, c = a * b; a < 10; a++) {
  // ...
}

// Задачи
// Чему будут равны переменные a, b, c и d в примере ниже?
function task1() {
  let a = 1, b = 1;
  let c = ++a;
  let d = b++;
  console.log(a); // 2 // 2, префиксная форма возвращает новое значение
  console.log(b); // 2 // 1, постфиксная форма возвращает старое значение
  console.log(c); // 2
  console.log(d); // 1
}

// Чему будут равны переменные a и x после выполнения кода в примере ниже?
function task2() {
  let a = 2;
  let x = 1 + (a *= 2);
  console.log(x); // 5
}

// Какой результат будет у выражений ниже?
function task3() {
  "" + 1 + 0 // "10" — Сложение со строкой "" + 1 преобразует 1 к строке: "" + 1 = "1", и в следующем случае "1" + 0 работает то же самое правило.
  "" - 1 + 0 // -1 — Вычитание - (как и большинство математических операторов) работает только с числами, пустая строка "" приводится к 0.
  true + false // 1 — true становится 1, false становится 0.
  6 / "3" // 2 — Деление / делает числа из операндов.
  "2" * "3" // 6 — Умножение * делает числа из операндов.
  4 + 5 + "px" // "9px" — Сначала складываем числа, а потом преобразуем результат к строке, добавив "px" в конце.
  "$" + 4 + 5 // $45 — Сложение со строкой преобразует 4 к строке: "$" + 4 = "$4", и в следующем случае "$4" + 5 работает то же самое правило.
  "4" - 2 // 2 — Вычитание - преобразует строки к числам.
  "4px" - 2 // NaN — В этом случае вычитание - не может преобразовать строку "4px" в число.
  "  -9  " + 5 // " -9 5" — Сложение со строкой преобразует 5 к строке: " -9 " + 5 = " -9 5".
  "  -9  " - 5 // -14 — Вычитание - преобразует строки к числам.
  null + 1 // 1 — null становится 0 после численного преобразования.
  undefined + 1 // NaN  — undefined становится NaN после численного преобразования.
  " \t \n" - 2 // -2 — Пробельные символы, такие как табуляция \t и перевод строки \n, преобразуются в 0.
}

// Какой результат будет у выражений ниже?
function task4() {
  5 > 4 // true
  "ананас" > "яблоко" // false
  "2" > "12" // true — Сравнение строк происходит посимвольно, поэтому "2" больше, чем "12".
  undefined == null // true — Специальные равенства == и === не различают undefined и null.
  undefined === null // false — Строгое равенство === различает undefined и null.
  null == "\n0\n" // false — null равен только undefined.
  null === +"\n0\n" // false — null строго равен только undefined.
}

// Какой результат будет у выражений ниже?
function task5() {
  5 >= 4 // true
  "ананас" > "яблоко" // false
  "2" > "12" // true
  undefined == null // true
  undefined === null // false
  null == "\n0\n" // false
  null === +"\n0\n" // false
}





// Операторы сравнения: >, <, >=, <=, ==, !=

