// Loops: while and for
// Для многократного повторения одного участка кода предусмотрены циклы. Существует два основных вида циклов: while и for.
// Цикл while имеет следующий синтаксис:

while (условие) {
  // код тела цикла
}
// Цикл while проверяет условие перед каждой итерацией. Если условие истинно, то выполняется тело цикла.
let i = 0;
while (i < 3) {
  // выводит 0, затем 1, затем 2
  console.log(i);
  i++;
}
// Одно выполнение тела цикла по-научному называется итерация. Цикл while проверяет условие перед каждой итерацией.
let k = 3;
while (k) {
  // когда k станет равным 0, условие станет ложным, и цикл остановится
  console.log(k);
  k--;
}
// Фигурные скобки не требуется для цикла из одной строки кода:
let j = 3;
while (j) console.log(j--);

// Loop do...while имеет вид:
do {
  // тело цикла
} while (condition);

// Цикл do..while похож на цикл while, но с одним отличием: он выполнит тело хотя бы один раз, а затем будет продолжать цикл до тех пор, пока условие верно.

// Например:
let m = 0;
do {
  console.log(m);
  m++;
} while (m < 3);

// Цикл for

// Цикл for имеет более широкий спектр возможностей, чем цикл while. Например, в нём можно объявлять переменные прямо в цикле.

for (начало; условие; шаг) {
  // ... тело цикла ...
}

for (let i = 0; i < 3; i++) {
  console.log(i); // выведет 0, затем 1, затем 2
}
// Начало: let i = 0; - выполняется один раз при входе в цикл
// Условие: i < 3; проверяется перед каждой итерацией и при его ложности цикл прекращается
// console.log(i);	Выполняется снова и снова, пока условие вычисляется в true.
// Шаг: i++ - выполняется после тела цикла на каждой итерации, но перед проверкой условия

// Пропуск частей «for»
// Любая часть for может быть пропущена. Например, если нам не нужно начальное действие, мы можем пропустить его.
let n = 0; // мы имеем n вне цикла
for (; n < 3; n++) {
  console.log(n); // 0, 1, 2
}
// Мы также можем удалить шаг:
let p = 0;
for (; p < 3; ) {
  console.log(p++);
}
// Цикл for без условия становится бесконечным циклом:
for (;;) {
  // будет выполняться вечно
}

// Прерывание цикла: break
// Директива break позволяет выйти из цикла немедленно, независимо от условия.
let sum = 0;
while (true) {
  let value = +prompt('Введите число', '');
  if (!value) break; // (*)
  sum += value;
}

// Пропуск части тела: continue
// Директива continue прекращает выполнение текущей итерации цикла и запускает следующую.
for (let q = 0; q < 10; q++) {
  // если true, пропустить оставшуюся часть тела цикла
  if (q % 2 == 0) continue;
  console.log(q); // 1, 3, 5, 7, 9
}

// Метки для break/continue
// Иногда нам нужно выйти одновременно из нескольких уровней цикла. Например, внутри цикла по i мы можем начать цикл по j с помощью метки:
outer: for (let i = 0; i < 3; i++) {
  for (let j = 0; j < 3; j++) {
    let input = prompt(`Значение на координатах (${i},${j})`, '');
    // если пустая строка или Отмена, то выйти из обоих циклов
    if (!input) break outer; // (*)
  }
}

/**
 * Мы рассмотрели 3 вида циклов:
while – Проверяет условие перед каждой итерацией.
do..while – Проверяет условие после каждой итерации.
for (;;) – Проверяет условие перед каждой итерацией, есть возможность задать дополнительные настройки.
 */

// Практика
// Какое последнее значение выведет этот код? Почему?
let i1 = 3;

while (i1) {
  console.log(i1--);
}

// Практика
// Оба цикла выводят alert с одинаковыми значениями или нет?
// Префиксный вариант ++i:
let i2 = 0;
while (++i2 < 5) console.log(i2); // 1 2 3 4

// Постфиксный вариант i++
let i3 = 0;
while (i3++ < 5) console.log(i3); // 1 2 3 4 5

// Какие значения выведет цикл for?
for (let i = 0; i < 5; i++) console.log(i); // 0 1 2 3 4

for (let i = 0; i < 5; ++i) console.log(i); // 0 1 2 3 4

// Выведите чётные числа
for (let i = 2; i <= 10; i++) {
  if (i % 2 === 0) {
    console.log(i);
  }
}

// Замените for на while
for (let i = 0; i < 3; i++) {
  alert(`number ${i}!`);
}

// var while
let i4 = 0;
while (i4 < 3) {
  console.log(`number ${i4}!`);
  i4++;
}

// Напишите цикл, который предлагает prompt ввести число, большее 100. Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.
let num;

do {
  num = prompt('Введите число больше 100?', 0);
} while (num <= 100 && num);

// Вывести простые числа
/**
 * Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.
Другими словами, n > 1 – простое, если при его делении на любое число кроме 1 и n есть остаток.
Например, 5 это простое число, оно не может быть разделено без остатка на 2, 3 и 4.
Напишите код, который выводит все простые числа из интервала от 2 до n.
Для n = 10 результат должен быть 2,3,5,7.
P.S. Код также должен легко модифицироваться для любых других интервалов.
 */

/**
 * Для всех i от 1 до 10 {
  проверить, делится ли число i на какое-либо из чисел до него
  если делится, то это i не подходит, берём следующее
  если не делится, то i - простое число
}
 */
let n1 = 10;

nextPrime: for (let i = 2; i <= n1; i++) {
  // Для всех i...

  for (let j = 2; j < i; j++) {
    // проверить, делится ли число..
    if (i % j == 0) continue nextPrime; // не подходит, берём следующее
  }

  alert(i); // простое число
}
